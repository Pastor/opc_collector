cmake_minimum_required(VERSION 3.2.1)
project(opc_collector)

include(CMakeDependentOption)
include(GNUInstallDirs)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")
set(OPEN62541_ROOT ${CMAKE_SOURCE_DIR}/3rdparty/open62541)

if (CMAKE_VERSION VERSION_LESS 2.8.5)
    set(CMAKE_INSTALL_BINDIR "bin" CACHE STRING "User executables (bin)")
    set(CMAKE_INSTALL_LIBDIR "lib${LIB_SUFFIX}" CACHE STRING "Object code libraries (lib)")
    set(CMAKE_INSTALL_INCLUDEDIR "include" CACHE STRING "C header files (include)")
    mark_as_advanced(CMAKE_INSTALL_BINDIR CMAKE_INSTALL_LIBDIR CMAKE_INSTALL_INCLUDEDIR)
else ()
    include(GNUInstallDirs)
endif ()

if (MSVC)
    set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} /SUBSYSTEM:CONSOLE /IGNORE:4099")
    #    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")
    #    set(CMAKE_CFLAGS "${CMAKE_CFLAGS} /arch:SSE2")
    if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
        set(CMAKE_CFLAGS "${CMAKE_CFLAGS} /MDd /bigobj")
        #        add_compile_options(/MDd /bigobj)
    else ()
        #        add_definitions(/MT)
        add_compile_options(/bigobj)
    endif ()
    add_definitions(/wd4267)
    add_definitions(/wd4250)
    add_definitions(/wd4996)
    add_definitions(/wd4334)
else ()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}   -fPIC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
    add_definitions(-DUSING_POSIX_THREADS=1)
    if (ANDROID)
        set(CMAKE_LINK_LIBRARY_FILE_FLAG "${CMAKE_LINK_LIBRARY_FILE_FLAG} -Wl,--hash-style=both")
    endif ()
endif ()

if (WIN32)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
endif ()

if (MEMORY_LEAK_DETECT)
    add_definitions(-DDETECT_MEMORY_LEAK)
endif ()
if (ENABLE_FILE_LOGGING)
    add_definitions(-DENABLE_FILE_LOGGING)
    add_definitions(-DLOG_FILE_LIMIT=1048576)
endif ()

include_directories(${CMAKE_SOURCE_DIR}/include)
include_directories(${CMAKE_BINARY_DIR})
include_directories(3rdparty/hidapi)
include_directories(3rdparty/open62541)
include_directories(src_c/core)
include_directories(src_c/default)

add_subdirectory(${CMAKE_SOURCE_DIR}/3rdparty/hidapi)
add_subdirectory(${CMAKE_SOURCE_DIR}/3rdparty/open62541)
add_subdirectory(${CMAKE_SOURCE_DIR}/src_c/core)
add_subdirectory(${CMAKE_SOURCE_DIR}/src_c/default)
enable_testing()

if (BUILD_TESTING)
    if (POLICY CMP0048)
        cmake_policy(SET CMP0048 NEW)
    endif (POLICY CMP0048)

    if (CMAKE_VERSION VERSION_LESS "3.1")
        add_definitions(-std=c++11)
    else ()
        set(CMAKE_CXX_STANDARD 11)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
        if (NOT CYGWIN)
            set(CMAKE_CXX_EXTENSIONS OFF)
        endif ()
    endif ()

    set(GOOGLETEST_VERSION 0.0.0)
    include_directories(3rdparty/googletest/googletest/include)
    include_directories(src_c/tests_base)

    add_subdirectory(${CMAKE_SOURCE_DIR}/3rdparty/googletest/googletest)
    add_subdirectory(${CMAKE_SOURCE_DIR}/src_c/tests_base)
endif ()